# Generated by Django 4.2.18 on 2025-02-04 09:17

from django.db import migrations
from django.db.models import Q

from django.utils.timezone import now


def migrate_data_forward(apps, schema_editor):
    Chronogram = apps.get_model("polio", "Chronogram")
    ChronogramTask = apps.get_model("polio", "ChronogramTask")
    ChronogramTemplateTask = apps.get_model("polio", "ChronogramTemplateTask")
    Round = apps.get_model("polio", "Round")

    rounds = (
        Round.objects.filter(
            # Polio campaign only.
            campaign__campaign_types__name="Polio",
            # Only rounds in the future.
            started_at__gte=now(),
        )
        .exclude(
            # A chronogram already exists.
            Q(chronograms__deleted_at__isnull=False)
            # The campaign has been soft-deleted.
            | Q(campaign__deleted_at__isnull=False)
        )
        .select_related("campaign__account")
        .prefetch_related("campaign__campaign_types", "chronograms")
    )

    print("-" * 80)
    print(f"Number of rounds to which chronograms will be added: {rounds.count()}.")

    for round in rounds:
        account = round.campaign.account

        # Get default chronogram template tasks.
        chronogram_template_tasks = ChronogramTemplateTask.objects.filter(deleted_at__isnull=True, account=account)
        if not chronogram_template_tasks.exists():
            continue

        # Create a chronogram.
        chronogram = Chronogram.objects.create(round=round, created_by=None)

        # Add default tasks to the chronogram.
        tasks = [
            ChronogramTask(
                chronogram=chronogram,
                created_by=None,
                description_en=template.description_en,
                description_fr=template.description_fr,
                period=template.period,
                start_offset_in_days=template.start_offset_in_days,
            )
            for template in chronogram_template_tasks
        ]
        ChronogramTask.objects.bulk_create(tasks)

        print("-" * 80)
        print(f"A chronogram with ID #{chronogram.id} has been automatically created for round ID #{round.id}")


class Migration(migrations.Migration):
    dependencies = [
        ("polio", "0217_round_is_test"),
    ]

    operations = [migrations.RunPython(migrate_data_forward, migrations.RunPython.noop, elidable=True)]
