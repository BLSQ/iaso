# Generated by Django 3.2.15 on 2023-04-11 13:35

from django.db import migrations

GROUPS = {
    "System administrator": {"excluded_permissions": []},
    "Admin project": {
        "excluded_permissions": ["iaso_data_tasks", "iaso_reports", "iaso_polio_budget_admin" "iaso_polio"]
    },
    "National data managers": {
        "excluded_permissions": [
            "iaso_mappings",
            "iaso_links",
            "iaso_sources",
            "iaso_data_tasks",
            "iaso_reports",
            "iaso_polio_budget_admin" "iaso_polio",
        ]
    },
    "District data managers": {
        "included_permissions": [
            "iaso_forms",
            "iaso_submissions",
            "iaso_update_submission",
            "iaso_users",
            "iaso_planning",
            "iaso_teams",
            "iaso_assignments",
            "iaso_completeness_stats",
            "iaso_workflows",
        ]
    },
    "Collectors": {"included_permissions": ["iaso_submissions", "iaso_planning", "iaso_completeness_stats"]},
}

PERMISSIONS = [
    "iaso_forms",
    "iaso_submissions",
    "iaso_update_submission",
    "iaso_mappings",
    "iaso_completeness",
    "iaso_org_units",
    "iaso_links",
    "iaso_users",
    "iaso_projects",
    "iaso_sources",
    "iaso_data_tasks",
    "iaso_reports",
    "iaso_planning",
    "iaso_teams",
    "iaso_assignments",
    "iaso_entities",
    "iaso_storages",
    "iaso_completeness_stats",
    "iaso_workflows",
    "iaso_polio_budget_admin",
    "iaso_polio",
]


def add_user_roles_and_permissions(apps, schema_editor):
    Group = apps.get_model("auth", "Group")
    UserRole = apps.get_model("iaso", "UserRole")
    Permission = apps.get_model("auth", "Permission")
    for group in GROUPS:
        if "excluded_permissions" in GROUPS[group]:
            included_permissions_codes = [
                permission
                for index, permission in enumerate(PERMISSIONS)
                if permission not in GROUPS[group]["excluded_permissions"]
            ]
        if "included_permissions" in GROUPS[group]:
            included_permissions_codes = GROUPS[group]["included_permissions"]
        included_permissions = Permission.objects.filter(codename__in=included_permissions_codes)
        created_group, is_created = Group.objects.get_or_create(name=group)
        if is_created:
            UserRole.objects.create(group=created_group)
            created_group.permissions.add(*list(included_permissions.values_list("id", flat=True)))


def remove_user_roles(apps, schema_editor):
    Group = apps.get_model("auth", "Group")
    for group in GROUPS:
        Group.objects.filter(name=group).delete()


class Migration(migrations.Migration):
    dependencies = [
        ("iaso", "0198_userrole"),
    ]

    operations = [migrations.RunPython(add_user_roles_and_permissions, remove_user_roles)]
