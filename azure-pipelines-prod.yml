name: Iaso-backend-prod
trigger:
- main

resources:
  containers:
    - container: postgis
      image: postgis/postgis:12-3.3
      env:
        POSTGRES_USER: postgres
        POSTGRES_PASSWORD: postgres
        POSTGRES_DB: does_not_matter
      ports:
        - 5432:5432
      # needed because the postgres container does not provide a health check
      options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

variables:
  tag: '$(Build.BuildId)'

pool:
  vmImage: ubuntu-24.04

services:
  postgres: postgis

steps:
- task: NodeTool@0
  inputs:
    versionSpec: '22.18.0'
  displayName: 'Install Node.js'

- script: |
    npm install -g npm@10.9.3
    node -v
    npm -v
    npm ci
    npm test -- --reporter xunit --reporter-option output=npm-test.xml
  displayName: 'npm install and run test'

- task: PublishTestResults@2
  condition: succeededOrFailed()
  inputs:
    testResultsFiles: "**/npm-test.xml"
    testRunTitle: 'Npm test results'

- task: UsePythonVersion@0
  inputs:
   versionSpec: '3.9'
   addToPath: true
   architecture: 'x64'

- script: |
    sudo apt update
  displayName: 'apt update'

- script: |
    sudo apt install gdal-bin
  displayName: 'install gdal'

- script: |
    python --version
    python -m venv ./venv
    . ./venv/bin/activate && pip install -U pip
  displayName: 'install pip'

- script: |
    . ./venv/bin/activate && pip install -r requirements.txt  && pip install -r requirements-dev.txt
    pip install unittest-xml-reporting
  displayName: 'install requirements'

- script: pip list
  displayName: 'Environment info'

- script: |
    . ./venv/bin/activate && ruff check .
  displayName: 'Check formatting with ruff'

# Setting the details for the health page
- task: Bash@3
  inputs:
    targetType: 'inline'
    script: |
      ./scripts/set_version.sh
  displayName: 'Set Version Info for Health'

# The secret key is done with an export because Azure pipelines will
# remove all env variables that start with SECRET_
- script: |
    export SECRET_KEY=${SECRETKEY}
    export DJANGO_SUPERUSER_PASSWORD=${DJANGO_SUPERUSER_PASSWORD}
    export DJANGO_SUPERUSER_USERNAME=${DJANGO_SUPERUSER_USERNAME}
    export DJANGO_SUPERUSER_EMAIL=${DJANGO_SUPERUSER_EMAIL}
    . ./venv/bin/activate &&  python manage.py migrate
    . ./venv/bin/activate &&  python manage.py createcachetable
    . ./venv/bin/activate &&  python manage.py test --testrunner xmlrunner.extra.djangotestrunner.XMLTestRunner --no-input
    . ./venv/bin/activate &&  python manage.py makemigrations --check
    . ./venv/bin/activate &&  python manage.py createsuperuser --noinput
  displayName: 'Django tests'
  condition: succeededOrFailed()
  env:
    IASO_ENVIRONMENT: development
    RDS_DB_NAME: does_not_matter
    SECRETKEY: secret-only-used-in-azure-pipeline
    DEBUG: true
    DJANGO_SETTINGS_MODULE: hat.settings
    RDS_PASSWORD: postgres
    RDS_HOSTNAME: localhost
    RDS_PORT: 5432
    RDS_USERNAME: postgres
    CACHE: false
    DEV_SERVER: true
    PLUGINS: polio
    DJANGO_SUPERUSER_USERNAME: admin
    DJANGO_SUPERUSER_EMAIL: adm@example.com
    DJANGO_SUPERUSER_PASSWORD: $(DJANGO_SUPERUSER_PASSWORD)

- task: PublishTestResults@2
  condition: succeededOrFailed()
  inputs:
    testResultsFiles: "**/TEST-*.xml"
    testRunTitle: 'Python $(PYTHON_VERSION)'

# --- Free disk on / (dev/root) BEFORE docker build ---
- script: |
    echo "Before cleanup:" && df -h
    echo "Removing large preinstalled SDKs..."
    sudo rm -rf /usr/local/lib/android || true
    sudo rm -rf /usr/share/dotnet      || true
    sudo rm -rf /usr/lib/jvm           || true
    sudo rm -rf /opt/ghc               || true
    sudo rm -rf /opt/hostedtoolcache   || true
    sudo apt-get clean
    sudo rm -rf /var/lib/apt/lists/*
    echo "After cleanup:" && df -h
  displayName: 'Free disk space on hosted agent'

- script: |
    echo "Disk space before Docker cleanup:" && df -h
    echo "Cleaning up Docker system to free space..."
    docker system prune -af --volumes || true
    echo "Disk space after Docker cleanup:" && df -h
  displayName: 'Clean up Docker system'

- script: docker build -t prod-coda2 --target prod -f $(Build.SourcesDirectory)/docker/bundle/Dockerfile .
  displayName: 'Build docker image'

# Save the Docker image compressed, in a dedicated folder for the artifact
- script: |
    mkdir -p $(Build.ArtifactStagingDirectory)/image
    docker save prod-coda2 | gzip > $(Build.ArtifactStagingDirectory)/image/prod-coda2.tar.gz
    ls -lh $(Build.ArtifactStagingDirectory)/image/prod-coda2.tar.gz
  displayName: 'Save docker image (compressed)'

# Copy static files into a separate artifact folder
- script: |
    cid=$(docker create prod-coda2)
    mkdir -p $(Build.ArtifactStagingDirectory)/static_artifact
    docker cp "$cid":/opt/app/static $(Build.ArtifactStagingDirectory)/static_artifact/
    docker rm "$cid" || true
  displayName: 'Copy static files from docker'

- script: |
    echo "Disk space before cleanup:" && df -h
    echo "Removing Docker image to free space..."
    docker rmi prod-coda2 || true
    docker system prune -af --volumes || true
    echo "Disk space after cleanup:" && df -h
  displayName: 'Clean up Docker image'

# --- Publish artifacts (same layout as dev) ---
- task: PublishBuildArtifacts@1
  inputs:
    pathtoPublish: '$(Build.ArtifactStagingDirectory)/image'
    artifactName: prod-coda2

- task: PublishBuildArtifacts@1
  inputs:
    pathtoPublish: '$(Build.ArtifactStagingDirectory)/static_artifact'
    artifactName: prod-coda2-static
  displayName: 'Publish static files'
