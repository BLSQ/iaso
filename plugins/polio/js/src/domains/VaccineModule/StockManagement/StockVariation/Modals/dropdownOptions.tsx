import { useMemo } from 'react';
import { useSafeIntl } from 'bluesquare-components';
import { DropdownOptions } from '../../../../../../../../../hat/assets/js/apps/Iaso/types/utils';
import { CREATED, RETURNED } from '../../constants';
import MESSAGES from '../../messages';
import { DosesPerVialDropdown } from '../../types';

export const VM_REACHED_DISCARD_POINT = 'vvm_reached_discard_point';
export const VACCINE_EXPIRED = 'vaccine_expired';
export const MISSING = 'missing';
export const RETURN_TO_SUPPLIER = 'return';
export const STEALING = 'stealing';
export const PHYSICAL_INVENTORY_ADD = 'physical_inventory_add';
export const PHYSICAL_INVENTORY_REMOVE = 'physical_inventory_remove';
export const BROKEN = 'broken';
export const UNREADABLE_LABEL = 'unreadable_label';
// from backend model.
// class StockCorrectionChoices(models.TextChoices):
// VVM_REACHED_DISCARD_POINT = "vvm_reached_discard_point", _("VVM reached the discard point")
// VACCINE_EXPIRED = "vaccine_expired", _("Vaccine expired")
// MISSING = "missing", _("Missing")
// RETURN = "return", _("Return")
// STEALING = "stealing", _("Stealing")
// PHYSICAL_INVENTORY_ADD = "physical_inventory_add", _("Add to Physical Inventory")
// PHYSICAL_INVENTORY_REMOVE = "physical_inventory_remove", _("rempove from Physical Inventory")

type IncidentType =
    | 'vaccine_expired'
    | 'vvm_reached_discard_point'
    | 'missing'
    | 'stealing'
    | 'physical_inventory'
    | 'physical_inventory_add'
    | 'physical_inventory_remove'
    | 'broken'
    | 'unreadable_label'
    | 'return';

export const useIncidentOptions = (
    hasUsableStock: boolean,
): DropdownOptions<IncidentType>[] => {
    const { formatMessage } = useSafeIntl();
    return useMemo(() => {
        const optionsForUsable: DropdownOptions<IncidentType>[] = [
            {
                label: formatMessage(MESSAGES[VM_REACHED_DISCARD_POINT]),
                value: VM_REACHED_DISCARD_POINT,
            },
            {
                label: formatMessage(MESSAGES[VACCINE_EXPIRED]),
                value: VACCINE_EXPIRED,
            },
            {
                label: formatMessage(MESSAGES[MISSING]),
                value: MISSING,
            },
            {
                label: formatMessage(MESSAGES[RETURN_TO_SUPPLIER]),
                value: RETURN_TO_SUPPLIER,
            },
            {
                label: formatMessage(MESSAGES[STEALING]),
                value: STEALING,
            },
            {
                label: formatMessage(MESSAGES[BROKEN]),
                value: BROKEN,
            },
            {
                label: formatMessage(MESSAGES[UNREADABLE_LABEL]),
                value: UNREADABLE_LABEL,
            },
        ];
        const inventoryOptions: DropdownOptions<IncidentType>[] = [
            {
                label: formatMessage(MESSAGES[PHYSICAL_INVENTORY_ADD]),
                value: PHYSICAL_INVENTORY_ADD,
            },
            {
                label: formatMessage(MESSAGES[PHYSICAL_INVENTORY_REMOVE]),
                value: PHYSICAL_INVENTORY_REMOVE,
            },
        ];

        if (hasUsableStock) {
            inventoryOptions.concat(optionsForUsable);
        }
        const results = hasUsableStock
            ? [...inventoryOptions, ...optionsForUsable]
            : inventoryOptions;
        return results.sort(
            (
                option1: DropdownOptions<IncidentType>,
                option2: DropdownOptions<IncidentType>,
            ) => option1.label.localeCompare(option2.label),
        ) as DropdownOptions<IncidentType>[];
    }, [formatMessage, hasUsableStock]);
};

type EarmarkType = 'created' | 'returned' | 'used';

export const useEarmarkOptions = (): DropdownOptions<EarmarkType>[] => {
    const { formatMessage } = useSafeIntl();
    return useMemo(() => {
        return [
            // Not including used, because they are generated by the backend based on Form A
            {
                label: formatMessage(MESSAGES[CREATED]),
                value: CREATED,
            },
            {
                label: formatMessage(MESSAGES[RETURNED]),
                value: RETURNED,
            },
        ].sort(
            (
                option1: DropdownOptions<EarmarkType>,
                option2: DropdownOptions<EarmarkType>,
            ) => option1.label.localeCompare(option2.label),
        ) as DropdownOptions<EarmarkType>[];
    }, [formatMessage]);
};

export const useAvailablePresentations = (
    dosesOptions: DosesPerVialDropdown | undefined,
    formData: { doses_per_vial?: number },
    usable = true,
): DropdownOptions<number>[] => {
    return useMemo(() => {
        const availableOptions: DropdownOptions<number>[] = dosesOptions
            ? dosesOptions.filter(option =>
                  usable
                      ? option.doses_available > 0
                      : option.unusable_doses > 0,
              )
            : [];
        const availableValues = availableOptions.map(o => o.value);
        // If the form has already been encoded, we add the value to avoid putting the form in error
        if (
            formData?.doses_per_vial &&
            !availableValues.includes(formData.doses_per_vial)
        ) {
            availableOptions.push({
                label: `${formData.doses_per_vial}`,
                value: formData.doses_per_vial,
            });
        }
        return availableOptions;
    }, [dosesOptions, formData?.doses_per_vial]);
};
