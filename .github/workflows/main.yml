name: Iaso Automated CI testing
# This workflow run automatically for every commit on github it checks the syntax and launch the tests.
on: [ push ]
env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push-image:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Determining version ${{ github.ref_name }}
        id: version
        run: |
          export GITHUB_BRANCH=${GITHUB_REF##*heads/}
          echo $GITHUB_BRANCH
          git describe --tags
          export VERSION_NAME=$(git describe --tags)--$GITHUB_BRANCH
          echo "::set-output name=VERSION_NAME::$VERSION_NAME"
          echo "::set-output name=IMAGE_TAG::${{ env.REGISTRY }}/blsq/iaso:$GITHUB_SHA"
      - name: Log in to the Container registry
        uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build and push Docker image
        uses: docker/build-push-action@v2
        with:
          push: true
          tags: ${{ steps.version.outputs.IMAGE_TAG }}
          file: docker/bundle/Dockerfile
  test_js:
    if: false
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Use node.js 14
        uses: actions/setup-node@v2
        with:
          node-version: '14'
          cache: npm
      - name: upgrade npm
        run: |
          npm install --global npm@8.5
      - name: Environment info
        run: |
          node --version
          npm --version
      - name: npm install and test
        run: |
          npm ci
          npm test
      - name: npm build (but don't commit)
        run: |
          npm run webpack-prod
      - name: Artifact the builded JS
        uses: actions/upload-artifact@v2
        with:
          name: jsbuild
          path: hat/assets/webpack/
      - name: Slack notification
        uses: rtCamp/action-slack-notify@v2.1.3
        env:
          SLACK_USERNAME: ${{ github.workflow }}
          SLACK_ICON_EMOJI: ":robot_face:"
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_CHANNEL: iaso-dev
          SLACK_COLOR: ${{ job.status }}
          SLACK_TITLE: ${{ format('Job {0} failed on {1}', github.job, github.ref) }}
          SLACK_FOOTER: ${{  format('<https://github.com/{0}/commit/{1}/checks|ðŸ”—{2} logs> | <https://github.com/{0}/commit/{1}/checks|ðŸ”— Commit {1}>', github.repository, github.sha, github.job) }}
          MSG_MINIMAL: true
        if: failure()
  test_docker:
    runs-on: ubuntu-latest
    needs: build-and-push-image
    services:
      postgres:
        image: mdillon/postgis:10
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: github_actions
        ports:
          - 5432:5432
        # needed because the postgres container does not provide a health check
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
    steps:
      - uses: actions/checkout@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Log in to the Container registry
        uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Pull image
        run: |
          docker image pull ${{ env.REGISTRY }}/blsq/iaso:$GITHUB_SHA
          echo ${{ env.REGISTRY }}/blsq/iaso:$GITHUB_SHA
      - name: smoke test
        run: docker run --rm ${{ env.REGISTRY }}/blsq/iaso:$GITHUB_SHA
      - name: Cypress run
        uses: cypress-io/github-action@v2
        with:
          start: docker run --rm --env DEBUG  --env PLUGINS --env RDS_PORT --env RDS_PASSWORD --env RDS_USER --env SECRET_KEY --env RDS_DB_NAME --env RDS_DB_HOST --network host -p 8081:8081 ${{ env.REGISTRY }}/blsq/iaso:$GITHUB_SHA start
          wait-on: 'http://localhost:8081'
        env:
          CYPRESS_USERNAME: "test"
          CYPRESS_PASSWORD: "test"
          CYPRESS_BASE_URL: "http://localhost:8081"
          TEST_PROD: true
          IASO_ENVIRONMENT: development
          RDS_DB_NAME: github_actions
          SECRET_KEY: secret
          DEBUG: true
          DJANGO_SETTINGS_MODULE: hat.settings
          RDS_PASSWORD: postgres
          RDS_HOSTNAME: localhost
          RDS_PORT: 5432
          RDS_USERNAME: postgres
          CACHE: false
          DEV_SERVER: true
          PLUGINS: polio
  test_python:
    if: false
    runs-on: ubuntu-latest
    services:
      postgres:
        image: mdillon/postgis:10
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: github_actions
        ports:
          - 5432:5432
        # needed because the postgres container does not provide a health check
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python 3.6
        uses: actions/setup-python@v2
        with:
          python-version: 3.6
      - name: Install GDAL
        run: sudo apt install gdal-bin
      - uses: actions/cache@v2
        id: cache-venv
        with:
          path: ./venv/
          # The cache key depends on requirements.txt
          key: ${{ runner.os }}-venv-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-venv-
          # Build a virtualenv, but only if it doesn't already exist
      - run: python -v && python -m venv ./venv && . ./venv/bin/activate && pip install -U pip &&
          pip install -r requirements.txt
        if: steps.cache-venv.outputs.cache-hit != 'true'
      - name: Environment info
        run: |
          pip list
      - name: Check formatting with black
        run: |
          . ./venv/bin/activate && black --check .
      - name: Django tests
        run: |
          . ./venv/bin/activate &&  python manage.py migrate
          . ./venv/bin/activate &&  python manage.py test
          # check we don't have missing migration
          . ./venv/bin/activate &&  python manage.py makemigrations --check
        env:
          IASO_ENVIRONMENT: development
          RDS_DB_NAME: github_actions
          SECRET_KEY: secret
          DEBUG: true
          DJANGO_SETTINGS_MODULE: hat.settings
          RDS_PASSWORD: postgres
          RDS_HOSTNAME: localhost
          RDS_PORT: 5432
          RDS_USERNAME: postgres
          CACHE: false
          DEV_SERVER: true
          PLUGINS: polio
          AWS_STORAGE_BUCKET_NAME: iaso-dev
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          DEFAULT_FILE_STORAGE: storages.backends.s3boto3.S3Boto3Storage
      - name: Slack notification
        uses: rtCamp/action-slack-notify@v2.1.3
        env:
          SLACK_USERNAME: ${{ github.workflow }}
          SLACK_ICON_EMOJI: ":robot_face:"
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_CHANNEL: iaso-dev
          SLACK_COLOR: ${{ job.status }}
          SLACK_TITLE: ${{ format('Job {0} failed on {1}', github.job, github.ref) }}
          SLACK_FOOTER: ${{  format('<https://github.com/{0}/commit/{1}/checks|ðŸ”—{2} logs> | <https://github.com/{0}/commit/{1}/checks|ðŸ”— Commit {1}>', github.repository, github.sha, github.job) }}
          MSG_MINIMAL: true
        if: failure()
  test_cypress:
    if: false
    runs-on: ubuntu-latest
    needs: [ test_js, test_python]
    strategy:
      fail-fast: false
      matrix:
        containers: [1 - auth, 2 - forms]
    services:
      postgres:
        image: mdillon/postgis:10
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: github_actions
        ports:
          - 5432:5432
        # needed because the postgres container does not provide a health check
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python 3.6
        uses: actions/setup-python@v2
        with:
          python-version: 3.6
      - name: Install GDAL
        run: sudo apt install gdal-bin
      - uses: actions/cache@v2
        id: cache-venv
        with:
          path: ./venv/
          # The cache key depends on requirements.txt
          key: ${{ runner.os }}-venv-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-venv-
        # Build a virtualenv, but only if it doesn't already exist
      - run: python -v && python -m venv ./venv && . ./venv/bin/activate && pip install -U pip &&
          pip install -r requirements.txt
        if: steps.cache-venv.outputs.cache-hit != 'true'
      - name: Download the builded JS
        uses: actions/download-artifact@v2
        with:
          name: jsbuild
          path: hat/assets/webpack/

      - name: Cypress run
        uses: cypress-io/github-action@v2
        with:
          spec: hat/assets/js/cypress/integration/${{ matrix.containers }}/*.spec.js
          start: ./venv/bin/python manage.py testserver --noinput iaso/fixtures/user.yaml
          wait-on: 'http://localhost:8000'
        env:
          CYPRESS_USERNAME: "test"
          CYPRESS_PASSWORD: "test"
          CYPRESS_BASE_URL: "http://localhost:8000"
          TEST_PROD: true
          IASO_ENVIRONMENT: development
          RDS_DB_NAME: github_actions
          SECRET_KEY: secret
          DEBUG: true
          DJANGO_SETTINGS_MODULE: hat.settings
          RDS_PASSWORD: postgres
          RDS_HOSTNAME: localhost
          RDS_PORT: 5432
          RDS_USERNAME: postgres
          CACHE: false
          DEV_SERVER: true
          PLUGINS: polio
          AWS_STORAGE_BUCKET_NAME: iaso-dev
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          DEFAULT_FILE_STORAGE: storages.backends.s3boto3.S3Boto3Storage

      - name: Slack notification
        uses: rtCamp/action-slack-notify@v2.1.3
        env:
          SLACK_USERNAME: ${{ github.workflow }}
          SLACK_ICON_EMOJI: ":robot_face:"
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_CHANNEL: iaso-dev
          SLACK_COLOR: ${{ job.status }}
          SLACK_TITLE: ${{ format('Job {0} failed on {1}', github.job, github.ref) }}
          SLACK_FOOTER: ${{  format('<https://github.com/{0}/commit/{1}/checks|ðŸ”—{2} logs> | <https://github.com/{0}/commit/{1}/checks|ðŸ”— Commit {1}>', github.repository, github.sha, github.job) }}
          MSG_MINIMAL: true
        if: failure()
      # after the test run completes
      # store videos and any screenshots
      # NOTE: screenshots will be generated only if E2E test failed
      # thus we store screenshots only on failures
      # Alternative: create and commit an empty cypress/screenshots folder
      # to always have something to upload
      - uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: cypress-screenshots
          path: /home/runner/work/iaso/iaso/hat/assets/js/cypress/screenshots/
      # Test run video was always captured, so this action uses "always()" condition
      - uses: actions/upload-artifact@v2
        if: always()
        with:
          name: cypress-videos
          path: /home/runner/work/iaso/iaso/hat/assets/js/cypress/videos/
