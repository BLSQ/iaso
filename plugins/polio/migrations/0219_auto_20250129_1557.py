# Generated by Django 4.2.17 on 2025-01-29 15:57

from django.db import migrations
from django.contrib.auth.models import Permission, Group
from django.contrib.contenttypes.models import ContentType


def migrate_permissions(apps, schema_editor):
    print("Starting permission migration...")

    # Get content types
    old_ct = ContentType.objects.get(app_label="menupermissions", model="custompermissionsupport")
    new_ct = ContentType.objects.get(app_label="polio", model="poliopermissionsupport")
    print(f"Found content types - Old: {old_ct}, New: {new_ct}")

    # Map old permission codenames to new ones
    permission_mapping = {
        "iaso_polio": "iaso_polio",
        "iaso_polio_budget": "iaso_polio_budget",
        "iaso_polio_budget_admin": "iaso_polio_budget_admin",
        "iaso_polio_config": "iaso_polio_config",
        "iaso_polio_chronogram": "iaso_polio_chronogram",
        "iaso_polio_chronogram_restricted_write": "iaso_polio_chronogram_restricted_write",
        "iaso_polio_notifications": "iaso_polio_notifications",
        "iaso_polio_vaccine_authorizations_admin": "iaso_polio_vaccine_authorizations_admin",
        "iaso_polio_vaccine_authorizations_read_only": "iaso_polio_vaccine_authorizations_read_only",
        "iaso_polio_vaccine_supply_chain_read": "iaso_polio_vaccine_supply_chain_read",
        "iaso_polio_vaccine_supply_chain_write": "iaso_polio_vaccine_supply_chain_write",
        "iaso_polio_vaccine_stock_management_read": "iaso_polio_vaccine_stock_management_read",
        "iaso_polio_vaccine_stock_management_write": "iaso_polio_vaccine_stock_management_write",
    }

    # For each old permission
    for old_codename, new_codename in permission_mapping.items():
        print(f"\nProcessing permission: {old_codename} -> {new_codename}")
        try:
            old_perm = Permission.objects.get(codename=old_codename, content_type=old_ct)
            print(f"Found old permission: {old_perm}")

            # Create new permission if it doesn't exist
            new_perm, created = Permission.objects.get_or_create(
                codename=new_codename, content_type=new_ct, defaults={"name": old_perm.name}
            )
            if created:
                print(f"Created new permission: {new_perm}")
            else:
                print(f"Found existing new permission: {new_perm}")

            # Update all users and groups that had the old permission
            user_count = old_perm.user_set.count()
            for user in old_perm.user_set.all():
                user.user_permissions.remove(old_perm)
                user.user_permissions.add(new_perm)
            print(f"Updated {user_count} users")

            group_count = old_perm.group_set.count()
            for group in old_perm.group_set.all():
                group.permissions.remove(old_perm)
                group.permissions.add(new_perm)
            print(f"Updated {group_count} groups")

            # Delete old permission
            old_perm.delete()
            print("Deleted old permission")

        except Permission.DoesNotExist:
            print(f"Warning: Old permission {old_codename} not found")

    print("\nPermission migration completed")


def reverse_migrate_permissions(apps, schema_editor):
    # This is a destructive migration, no reverse possible
    pass


class Migration(migrations.Migration):
    dependencies = [
        ("polio", "0218_poliopermissionsupport"),
    ]

    operations = [
        migrations.RunPython(migrate_permissions, reverse_migrate_permissions),
    ]
