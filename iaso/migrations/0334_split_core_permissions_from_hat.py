# Generated by Django 4.2.17 on 2025-07-15 15:35

from django.contrib.auth.models import Permission
from django.contrib.contenttypes.models import ContentType
from django.db import migrations


def migrate_permissions(apps, schema_editor):
    print("Starting permission migration...")

    # Get content types
    old_ct = ContentType.objects.get(app_label="menupermissions", model="custompermissionsupport")
    new_ct = ContentType.objects.get(app_label="iaso", model="corepermissionsupport")
    print(f"Found content types - Old: {old_ct}, New: {new_ct}")

    # Map old permission codenames to new ones
    permission_mapping = {
        "iaso_assignments": "iaso_assignments",
        "iaso_completeness": "iaso_completeness",
        "iaso_completeness_stats": "iaso_completeness_stats",
        "iaso_datastore_read": "iaso_datastore_read",
        "iaso_datastore_write": "iaso_datastore_write",
        "iaso_data_tasks": "iaso_data_tasks",
        "iaso_entities": "iaso_entities",
        "iaso_entity_type_write": "iaso_entity_type_write",
        "iaso_entity_duplicates_read": "iaso_entity_duplicates_read",
        "iaso_entity_duplicates_write": "iaso_entity_duplicates_write",
        "iaso_forms": "iaso_forms",
        "iaso_forms_stats": "iaso_forms_stats",
        "iaso_links": "iaso_links",
        "iaso_mappings": "iaso_mappings",
        "iaso_mobile_app_offline_setup": "iaso_mobile_app_offline_setup",
        "iaso_modules": "iaso_modules",
        "iaso_org_units": "iaso_org_units",
        "iaso_org_units_history": "iaso_org_units_history",
        "iaso_org_units_read": "iaso_org_units_read",
        "iaso_org_unit_types": "iaso_org_unit_types",
        "iaso_org_unit_groups": "iaso_org_unit_groups",
        "iaso_org_unit_change_request_review": "iaso_org_unit_change_request_review",
        "iaso_org_unit_change_request_configurations": "iaso_org_unit_change_request_configurations",
        "iaso_pages": "iaso_pages",
        "iaso_page_write": "iaso_page_write",
        "iaso_payments": "iaso_payments",
        "iaso_planning_write": "iaso_planning_write",
        "iaso_planning_read": "iaso_planning_read",
        "iaso_projects": "iaso_projects",
        "iaso_registry_write": "iaso_registry_write",
        "iaso_registry_read": "iaso_registry_read",
        "iaso_reports": "iaso_reports",
        "iaso_write_sources": "iaso_write_sources",
        "iaso_sources": "iaso_sources",
        "iaso_sources_can_change_default_version": "iaso_sources_can_change_default_version",
        "iaso_storages": "iaso_storages",
        "iaso_submissions": "iaso_submissions",
        "iaso_update_submission": "iaso_update_submission",
        "iaso_teams": "iaso_teams",
        "iaso_users": "iaso_users",
        "iaso_users_managed": "iaso_users_managed",
        "iaso_user_roles": "iaso_user_roles",
        "iaso_workflows": "iaso_workflows",
    }

    # For each old permission
    for old_codename, new_codename in permission_mapping.items():
        print(f"\nProcessing permission: {old_codename} -> {new_codename}")
        try:
            old_perm = Permission.objects.get(codename=old_codename, content_type=old_ct)
            print(f"Found old permission: {old_perm}")

            # Create new permission if it doesn't exist
            new_perm, created = Permission.objects.get_or_create(
                codename=new_codename, content_type=new_ct, defaults={"name": old_perm.name}
            )
            if created:
                print(f"Created new permission: {new_perm}")
            else:
                print(f"Found existing new permission: {new_perm}")

            # Update all users and groups that had the old permission
            user_count = old_perm.user_set.count()
            for user in old_perm.user_set.all():
                user.user_permissions.remove(old_perm)
                user.user_permissions.add(new_perm)
            print(f"Updated {user_count} users")

            group_count = old_perm.group_set.count()
            for group in old_perm.group_set.all():
                group.permissions.remove(old_perm)
                group.permissions.add(new_perm)
            print(f"Updated {group_count} groups")

            # Delete old permission
            old_perm.delete()
            print("Deleted old permission")

        except Permission.DoesNotExist:
            print(f"Warning: Old permission {old_codename} not found")

    print("\nPermission migration completed")


def reverse_migrate_permissions(apps, schema_editor):
    # This is a destructive migration, no reverse possible
    pass


class Migration(migrations.Migration):
    """
    This is the equivalent of the 0235 migration in the polio plugin.
    """

    dependencies = [
        ("iaso", "0333_corepermissionsupport"),
        ("menupermissions", "0074_alter_custompermissionsupport_options"),
    ]

    operations = [
        migrations.RunPython(migrate_permissions, reverse_migrate_permissions),
    ]
