# Generated by Django 3.2.21 on 2023-09-25 09:10

from django.db import migrations, models
from django.db.models import F, Value, CharField
from django.db.models.functions import Cast
from django.db.models.fields.json import KeyTextTransform


def check_no_duplicated_version_id(apps, schema_editor):
    FormVersion = apps.get_model("iaso", "FormVersion")
    Instance = apps.get_model("iaso", "Instance")

    # the constraint is on the version_id and the form_id together
    # so we need to check for duplicates

    dups_ids = (
        FormVersion.objects.values("form", "version_id").annotate(num_times=models.Count("id")).filter(num_times__gt=1)
    )

    # utility function to find the next OK version_id for a form when there are duplicated
    def next_ok_version_id(form, version_id):
        # we need to find the next available version_id
        # we start with the current one
        version_id_num = int(version_id)
        while True:
            version_id_num += 1
            version_id = str(version_id_num)
            if not FormVersion.objects.filter(form=form, version_id=version_id).exists():
                return version_id

    for dup in dups_ids:
        print("\nFound duplicated version_id", dup)

        # we get all the versions with the same form_id and version_id
        versions = FormVersion.objects.filter(form=dup["form"], version_id=dup["version_id"])

        # we keep the first one
        first_version = versions.first()
        print("Keeping", first_version.version_id)

        # we update the other ones
        for vv in versions.exclude(id=first_version.id):
            vv.version_id = next_ok_version_id(vv.form, vv.version_id)
            vv.form_descriptor["version"] = vv.version_id
            vv.save()

            print("Updating other version to use version_id", vv.version_id, "\n")

            # update corresponding instances

            instances = Instance.objects.filter(form_version=vv)
            for instance in instances:
                print("Updating instance", instance.id, "for version", vv.version_id)

                instance.json["_version"] = vv.version_id
                instance.save()


class Migration(migrations.Migration):
    dependencies = [
        ("iaso", "0231_merge_20230904_2154"),
    ]

    operations = [migrations.RunPython(check_no_duplicated_version_id, reverse_code=migrations.RunPython.noop)]
