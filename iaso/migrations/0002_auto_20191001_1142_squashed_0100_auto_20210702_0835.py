# Generated by Django 3.1.14 on 2022-01-10 14:07

from django.conf import settings
import django.contrib.gis.db.models.fields
import django.contrib.postgres.fields
import django.contrib.postgres.fields.citext
import django.contrib.postgres.fields.jsonb
import django.contrib.postgres.indexes
from django.db import migrations, models
import django.db.migrations.operations.special
import django.db.models.deletion
import django_ltree.fields  # type: ignore
import iaso.models.base
import iaso.models.forms
import uuid


# Functions from the following migrations need manual copying.
# Move them and any dependencies into this file, then update the
# RunPython operations to refer to the local versions:
# iaso.migrations.0052_fix_period_before_after
# iaso.migrations.0062_transfer_validation_status
# iaso.migrations.0063_form_uuid
# iaso.migrations.0065_auto_20201201_1228
# iaso.migrations.0096_add_account_feature_flag_20210621_1244
# iaso.migrations.0097_add_account_feature_flag_catchment_20210624_0808


def create_shape_account_flag(apps, schema_editor):
    AccountFeatureFlag = apps.get_model("iaso", "AccountFeatureFlag")
    AccountFeatureFlag.objects.create(code="ALLOW_SHAPE_EDITION", name="Allow shape edition in Iaso UI")


def reverse_create_shape_account_flag(apps, schema_editor):
    AccountFeatureFlag = apps.get_model("iaso", "AccountFeatureFlag")
    AccountFeatureFlag.objects.get(code="ALLOW_SHAPE_EDITION", name="Allow shape edition in Iaso UI").delete()


def create_catchment_account_flag(apps, schema_editor):
    AccountFeatureFlag = apps.get_model("iaso", "AccountFeatureFlag")
    AccountFeatureFlag.objects.create(code="ALLOW_CATCHMENT_EDITION", name="Allow catchment shape edition in Iaso UI")


def reverse_catchment_shape_account_flag(apps, schema_editor):
    AccountFeatureFlag = apps.get_model("iaso", "AccountFeatureFlag")
    AccountFeatureFlag.objects.get(
        code="ALLOW_CATCHMENT_EDITION", name="Allow catchment shape edition in Iaso UI"
    ).delete()


class Migration(migrations.Migration):
    replaces = [
        ("iaso", "0002_auto_20191001_1142"),
        ("iaso", "0003_auto_20191003_1301"),
        ("iaso", "0004_auto_20191003_1311"),
        ("iaso", "0005_auto_20191003_1321"),
        ("iaso", "0006_auto_20191004_0912"),
        ("iaso", "0007_auto_20191004_0927"),
        ("iaso", "0008_auto_20191010_1147"),
        ("iaso", "0009_group"),
        ("iaso", "0010_auto_20191011_1433"),
        ("iaso", "0011_orgunittype_depth"),
        ("iaso", "0012_instance_export_id"),
        ("iaso", "0013_auto_20191029_1539"),
        ("iaso", "0014_record_recordtype"),
        ("iaso", "0014_orgunit_catchment"),
        ("iaso", "0015_merge_20191104_1319"),
        ("iaso", "0016_groupset"),
        ("iaso", "0017_multi_tenant"),
        ("iaso", "0018_profile"),
        ("iaso", "0019_auto_20191127_1602"),
        ("iaso", "0020_account_default_version"),
        ("iaso", "0021_auto_20191203_1302"),
        ("iaso", "0022_auto_20191218_1110"),
        ("iaso", "0023_device_projects"),
        ("iaso", "0027_put_devices_in_projects"),
        ("iaso", "0028_remove_group_projects"),
        ("iaso", "0022_auto_20200102_0729"),
        ("iaso", "0029_merge_20200102_0820"),
        ("iaso", "0022_auto_20191217_1346"),
        ("iaso", "0030_merge_20200102_0916"),
        ("iaso", "0031_auto_20200121_1327"),
        ("iaso", "0032_form_instances"),
        ("iaso", "0033_form_version_xls_file"),
        ("iaso", "0034_form_version_upload_to"),
        ("iaso", "0035_form_and_versions_fine_tuning"),
        ("iaso", "0036_rename_mapping_to_mapping_version"),
        ("iaso", "0037_export_request_models"),
        ("iaso", "0036_instance_deleted"),
        ("iaso", "0038_merge_20200317_1456"),
        ("iaso", "0039_formversion_form_descriptor"),
        ("iaso", "0040_form_derived"),
        ("iaso", "0041_auto_20200421_0656"),
        ("iaso", "0040_auto_20200422_1220"),
        ("iaso", "0042_merge_20200427_1429"),
        ("iaso", "0043_auto_20200428_0650"),
        ("iaso", "0044_project_needs_authentication"),
        ("iaso", "0045_orgunit_creator"),
        ("iaso", "0044_profile_org_units"),
        ("iaso", "0046_merge_20200505_1214"),
        ("iaso", "0047_take_some_altitude"),
        ("iaso", "0047_feature_flags"),
        ("iaso", "0048_merge_20200522_1405"),
        ("iaso", "0049_remove_groupset_projects"),
        ("iaso", "0050_operations"),
        ("iaso", "0051_device_position"),
        ("iaso", "0052_fix_period_before_after"),
        ("iaso", "0053_auto_20200614_1556"),
        ("iaso", "0054_exportstatus_last_error_message"),
        ("iaso", "0053_org_unit_type_projects_mandatory"),
        ("iaso", "0055_merge_20200616_1215"),
        ("iaso", "0053_org_unit_path"),
        ("iaso", "0056_merge_20200616_1223"),
        ("iaso", "0057_orgunit_multipoly"),
        ("iaso", "0058_orgunit_multipoly"),
        ("iaso", "0059_auto_20200811_1401"),
        ("iaso", "0060_auto_20200811_1740"),
        ("iaso", "0061_auto_20200811_1742"),
        ("iaso", "0062_transfer_validation_status"),
        ("iaso", "0063_form_uuid"),
        ("iaso", "0064_instance_deleted"),
        ("iaso", "0065_auto_20201201_1456"),
        ("iaso", "0065_auto_20201201_1228"),
        ("iaso", "0066_merge_20201208_1115"),
        ("iaso", "0067_auto_20201209_1333"),
        ("iaso", "0068_auto_20201209_1359"),
        ("iaso", "0069_deviceposition_transport"),
        ("iaso", "0070_task"),
        ("iaso", "0071_auto_20210113_1222"),
        ("iaso", "0072_auto_20210113_1251"),
        ("iaso", "0073_auto_20210118_1525"),
        ("iaso", "0074_remove_task_task_name"),
        ("iaso", "0075_task_queue_answer"),
        ("iaso", "0076_auto_20210122_1610"),
        ("iaso", "0077_auto_20210125_1528"),
        ("iaso", "0078_form_label_keys"),
        ("iaso", "0079_project_external_token"),
        ("iaso", "0080_profile_external_user_id"),
        ("iaso", "0081_instance_to_export"),
        ("iaso", "0082_exportrequest_continue_on_error"),
        ("iaso", "0083_datasource_default_version"),
        ("iaso", "0084_form_deleted_at"),
        ("iaso", "0084_auto_20210402_1458"),
        ("iaso", "0085_merge_20210415_2144"),
        ("iaso", "0086_delete_bulkoperation"),
        ("iaso", "0086_add_version_constraints"),
        ("iaso", "0087_merge_20210526_1646"),
        ("iaso", "0088_group_domain"),
        ("iaso", "0089_page"),
        ("iaso", "0090_auto_20210604_1553"),
        ("iaso", "0089_profile_language"),
        ("iaso", "0091_merge_20210609_1748"),
        ("iaso", "0092_auto_20210611_0951"),
        ("iaso", "0093_importgpkg"),
        ("iaso", "0093_commentiaso"),
        ("iaso", "0094_merge_20210615_1322"),
        ("iaso", "0095_auto_20210621_1131"),
        ("iaso", "0096_add_account_feature_flag_20210621_1244"),
        ("iaso", "0097_add_account_feature_flag_catchment_20210624_0808"),
        ("iaso", "0099_orgunittype_category"),
        ("iaso", "0100_auto_20210702_0835"),
    ]

    dependencies = [
        ("iaso", "0001_squashed_0026_adding_indexes_on_org_unit"),
        ("sites", "0002_alter_domain_unique"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ("contenttypes", "0002_remove_content_type_name"),
    ]

    operations = [
        migrations.RenameField(
            model_name="orgunit",
            old_name="source",
            new_name="sub_source",
        ),
        migrations.AlterField(
            model_name="datasource",
            name="name",
            field=models.CharField(max_length=255, unique=True),
        ),
        migrations.AlterField(
            model_name="link",
            name="validator",
            field=models.ForeignKey(
                blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL
            ),
        ),
        migrations.RemoveField(
            model_name="link",
            name="algorithm",
        ),
        migrations.CreateModel(
            name="AlgorithmRun",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "algorithm",
                    models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="iaso.matchingalgorithm"),
                ),
                (
                    "launcher",
                    models.ForeignKey(
                        blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL
                    ),
                ),
                ("ended_at", models.DateTimeField(blank=True, null=True)),
                ("finished", models.BooleanField(default=False)),
                ("result", django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True)),
                (
                    "version_1",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="runs_where_destination",
                        to="iaso.sourceversion",
                    ),
                ),
                (
                    "version_2",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="runs_where_source",
                        to="iaso.sourceversion",
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="link",
            name="algorithm_run",
            field=models.ForeignKey(
                blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to="iaso.algorithmrun"
            ),
        ),
        migrations.AddField(
            model_name="form",
            name="fields",
            field=django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name="orgunittype",
            name="depth",
            field=models.PositiveSmallIntegerField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name="instance",
            name="export_id",
            field=models.TextField(blank=True, default=iaso.models.base.generate_id_for_dhis_2, null=True),
        ),
        migrations.AlterField(
            model_name="instance",
            name="location",
            field=django.contrib.gis.db.models.fields.PointField(blank=True, null=True, srid=4326),
        ),
        migrations.AlterField(
            model_name="orgunit",
            name="location",
            field=django.contrib.gis.db.models.fields.PointField(blank=True, null=True, srid=4326),
        ),
        migrations.CreateModel(
            name="RecordType",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("name", models.TextField()),
                ("description", models.TextField()),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("projects", models.ManyToManyField(blank=True, related_name="record_types", to="iaso.Project")),
            ],
        ),
        migrations.AddField(
            model_name="orgunit",
            name="catchment",
            field=django.contrib.gis.db.models.fields.PolygonField(blank=True, null=True, srid=4326),
        ),
        migrations.RemoveField(
            model_name="form",
            name="projects",
        ),
        migrations.AddField(
            model_name="datasource",
            name="projects",
            field=models.ManyToManyField(blank=True, related_name="data_sources", to="iaso.Project"),
        ),
        migrations.AddField(
            model_name="deviceownership",
            name="project",
            field=models.ForeignKey(
                blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to="iaso.project"
            ),
        ),
        migrations.AddField(
            model_name="instance",
            name="project",
            field=models.ForeignKey(
                blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to="iaso.project"
            ),
        ),
        migrations.CreateModel(
            name="Record",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("value", models.DecimalField(decimal_places=10, max_digits=19)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "org_unit",
                    models.ForeignKey(
                        blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to="iaso.orgunit"
                    ),
                ),
                (
                    "version",
                    models.ForeignKey(
                        blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to="iaso.sourceversion"
                    ),
                ),
                (
                    "record_type",
                    models.ForeignKey(
                        blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to="iaso.recordtype"
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="account",
            name="default_version",
            field=models.ForeignKey(
                blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to="iaso.sourceversion"
            ),
        ),
        migrations.AlterField(
            model_name="project",
            name="forms",
            field=models.ManyToManyField(blank=True, related_name="projects", to="iaso.Form"),
        ),
        migrations.AddField(
            model_name="datasource",
            name="read_only",
            field=models.BooleanField(default=True),
        ),
        migrations.AddField(
            model_name="device",
            name="projects",
            field=models.ManyToManyField(blank=True, related_name="devices", to="iaso.Project"),
        ),
        migrations.CreateModel(
            name="Group",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("name", models.TextField()),
                ("source_ref", models.TextField(blank=True, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("org_units", models.ManyToManyField(blank=True, related_name="groups", to="iaso.OrgUnit")),
                (
                    "source_version",
                    models.ForeignKey(
                        blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to="iaso.sourceversion"
                    ),
                ),
            ],
        ),
        migrations.AlterField(
            model_name="sourceversion",
            name="data_source",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, related_name="versions", to="iaso.datasource"
            ),
        ),
        migrations.CreateModel(
            name="ExternalCredentials",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("name", models.TextField()),
                ("login", models.TextField()),
                ("password", models.TextField()),
                ("url", models.TextField()),
                (
                    "account",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, related_name="credentials", to="iaso.account"
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="formversion",
            name="form",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, related_name="form_versions", to="iaso.form"
            ),
        ),
        migrations.AddField(
            model_name="datasource",
            name="credentials",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="data_sources",
                to="iaso.externalcredentials",
            ),
        ),
        migrations.AddField(
            model_name="form",
            name="period_type",
            field=models.TextField(
                blank=True,
                choices=[("MONTH", "Month"), ("QUARTER", "Quarter"), ("SIX_MONTH", "Six-month"), ("YEAR", "Year")],
                null=True,
            ),
        ),
        migrations.AddField(
            model_name="form",
            name="single_per_period",
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name="instance",
            name="period",
            field=models.TextField(blank=True, db_index=True, null=True),
        ),
        migrations.AlterField(
            model_name="instance",
            name="form",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="instances",
                to="iaso.form",
            ),
        ),
        migrations.AlterField(
            model_name="formversion",
            name="file",
            field=models.FileField(default="missing", upload_to="forms/"),
            preserve_default=False,
        ),
        migrations.AlterField(
            model_name="formversion",
            name="version_id",
            field=models.TextField(default="missing"),
            preserve_default=False,
        ),
        migrations.AlterField(
            model_name="formversion",
            name="file",
            field=models.FileField(upload_to=iaso.models.forms._form_version_upload_to),
        ),
        migrations.AddField(
            model_name="formversion",
            name="xls_file",
            field=models.FileField(blank=True, null=True, upload_to=iaso.models.forms._form_version_upload_to),
        ),
        migrations.AddField(
            model_name="form",
            name="periods_after_allowed",
            field=models.IntegerField(default=0),
        ),
        migrations.AddField(
            model_name="form",
            name="periods_before_allowed",
            field=models.IntegerField(default=0),
        ),
        migrations.AlterField(
            model_name="form",
            name="name",
            field=models.TextField(default="Untitled"),
            preserve_default=False,
        ),
        migrations.AlterField(
            model_name="instance",
            name="form",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                related_name="instances",
                to="iaso.form",
            ),
        ),
        migrations.CreateModel(
            name="ExportLog",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("sent", django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True)),
                ("received", django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("http_status", models.IntegerField(blank=True, null=True)),
                ("url", models.TextField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name="ExportRequest",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("params", django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True)),
                ("result", django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True)),
                ("finished", models.BooleanField(default=False)),
                (
                    "status",
                    models.TextField(
                        choices=[
                            ("QUEUED", "Queued"),
                            ("RUNNING", "Running"),
                            ("EXPORTED", "Exported"),
                            ("ERRORED", "Errored"),
                            ("SKIPPED", "Skipped"),
                        ],
                        default="QUEUED",
                    ),
                ),
                ("instance_count", models.IntegerField()),
                ("exported_count", models.IntegerField()),
                ("errored_count", models.IntegerField()),
                ("last_error_message", models.TextField()),
                ("queued_at", models.DateTimeField(auto_now_add=True)),
                ("started_at", models.DateTimeField(blank=True, null=True)),
                ("ended_at", models.DateTimeField(blank=True, null=True)),
                (
                    "launcher",
                    models.ForeignKey(
                        blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Mapping",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("name", models.TextField()),
                (
                    "mapping_type",
                    models.TextField(choices=[("AGGREGATE", "Aggregate"), ("EVENT", "Event"), ("DERIVED", "Derived")]),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "data_source",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, related_name="mappings", to="iaso.datasource"
                    ),
                ),
                (
                    "form",
                    models.ForeignKey(
                        blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to="iaso.form"
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="instance",
            name="last_export_success_at",
            field=models.DateTimeField(blank=True, null=True),
        ),
        migrations.CreateModel(
            name="MappingVersion",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("name", models.TextField()),
                ("json", django.contrib.postgres.fields.jsonb.JSONField()),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "form_version",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="mapping_versions",
                        to="iaso.formversion",
                    ),
                ),
                (
                    "mapping",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="versions",
                        to="iaso.mapping",
                    ),
                ),
            ],
            options={
                "unique_together": {("form_version", "name")},
            },
        ),
        migrations.CreateModel(
            name="ExportStatus",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "status",
                    models.TextField(
                        choices=[
                            ("QUEUED", "Queued"),
                            ("RUNNING", "Running"),
                            ("EXPORTED", "Exported"),
                            ("ERRORED", "Errored"),
                            ("SKIPPED", "Skipped"),
                        ],
                        default="QUEUED",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("export_logs", models.ManyToManyField(blank=True, to="iaso.ExportLog")),
                (
                    "export_request",
                    models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="iaso.exportrequest"),
                ),
                ("instance", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="iaso.instance")),
                (
                    "mapping_version",
                    models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="iaso.mappingversion"),
                ),
            ],
        ),
        migrations.AddField(
            model_name="instance",
            name="deleted",
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name="formversion",
            name="form_descriptor",
            field=django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name="form",
            name="derived",
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name="form",
            name="correlatable",
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name="form",
            name="correlation_field",
            field=models.TextField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name="instance",
            name="correlation_id",
            field=models.BigIntegerField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name="project",
            name="needs_authentication",
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name="orgunit",
            name="creator",
            field=models.ForeignKey(
                blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL
            ),
        ),
        migrations.CreateModel(
            name="Profile",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("account", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="iaso.account")),
                (
                    "user",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="iaso_profile",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                ("org_units", models.ManyToManyField(blank=True, related_name="iaso_profile", to="iaso.OrgUnit")),
            ],
        ),
        migrations.AlterField(
            model_name="instance",
            name="location",
            field=django.contrib.gis.db.models.fields.PointField(blank=True, dim=3, null=True, srid=4326),
        ),
        migrations.AlterField(
            model_name="orgunit",
            name="location",
            field=django.contrib.gis.db.models.fields.PointField(blank=True, dim=3, null=True, srid=4326),
        ),
        migrations.CreateModel(
            name="FeatureFlag",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("code", models.CharField(max_length=30)),
                ("name", models.CharField(max_length=100)),
                ("description", models.TextField(blank=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.AddField(
            model_name="project",
            name="feature_flags",
            field=models.ManyToManyField(blank=True, related_name="_project_feature_flags_+", to="iaso.FeatureFlag"),
        ),
        migrations.CreateModel(
            name="GroupSet",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("name", models.TextField()),
                ("source_ref", models.TextField(blank=True, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("groups", models.ManyToManyField(blank=True, related_name="group_sets", to="iaso.Group")),
                (
                    "source_version",
                    models.ForeignKey(
                        blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to="iaso.sourceversion"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="BulkOperation",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("operation_type", models.CharField(choices=[("UPDATE", "Update")], max_length=100)),
                ("operation_count", models.PositiveIntegerField()),
                ("json_body", django.contrib.postgres.fields.jsonb.JSONField()),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "content_type",
                    models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to="contenttypes.contenttype"),
                ),
                ("user", models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                "db_table": "iaso_operation_bulkupdate",
            },
        ),
        migrations.CreateModel(
            name="DevicePosition",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("uuid", models.UUIDField(default=uuid.uuid4, unique=True)),
                ("location", django.contrib.gis.db.models.fields.PointField(dim=3, srid=4326)),
                ("accuracy", models.DecimalField(decimal_places=2, max_digits=7)),
                ("captured_at", models.DateTimeField()),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("device", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="iaso.device")),
            ],
        ),
        # migrations.RunPython(
        #     code=iaso.migrations.0052_fix_period_before_after.fix_period_before_after,
        #     reverse_code=django.db.migrations.operations.special.RunPython.noop,
        # ),
        migrations.AlterField(
            model_name="mapping",
            name="mapping_type",
            field=models.TextField(
                choices=[
                    ("AGGREGATE", "Aggregate"),
                    ("EVENT", "Event"),
                    ("EVENT_TRACKER", "Event Tracker"),
                    ("DERIVED", "Derived"),
                ]
            ),
        ),
        migrations.AddField(
            model_name="exportstatus",
            name="last_error_message",
            field=models.TextField(blank=True, null=True),
        ),
        migrations.AlterField(
            model_name="orgunittype",
            name="projects",
            field=models.ManyToManyField(related_name="unit_types", to="iaso.Project"),
        ),
        migrations.AddField(
            model_name="orgunit",
            name="path",
            field=django_ltree.fields.PathField(blank=True, null=True, unique=True),
        ),
        migrations.AddIndex(
            model_name="orgunit",
            index=django.contrib.postgres.indexes.GistIndex(
                buffering=True, fields=["path"], name="iaso_orguni_path_d11c66_gist"
            ),
        ),
        migrations.AlterField(
            model_name="orgunit",
            name="geom",
            field=django.contrib.gis.db.models.fields.GeometryField(null=True, srid=4326),
        ),
        migrations.AlterField(
            model_name="orgunit",
            name="simplified_geom",
            field=django.contrib.gis.db.models.fields.GeometryField(null=True, srid=4326),
        ),
        migrations.AlterField(
            model_name="orgunit",
            name="catchment",
            field=django.contrib.gis.db.models.fields.GeometryField(null=True, srid=4326),
        ),
        migrations.RunSQL(
            sql="update iaso_orgunit set geom=st_multi(geom) where geom is not null",
            reverse_sql="",
        ),
        migrations.RunSQL(
            sql="update iaso_orgunit set simplified_geom=st_multi(simplified_geom) where simplified_geom is not null",
            reverse_sql="",
        ),
        migrations.RunSQL(
            sql="update iaso_orgunit set catchment=st_multi(catchment) where catchment is not null",
            reverse_sql="",
        ),
        migrations.AlterField(
            model_name="orgunit",
            name="catchment",
            field=django.contrib.gis.db.models.fields.MultiPolygonField(
                blank=True, geography=True, null=True, srid=4326
            ),
        ),
        migrations.AlterField(
            model_name="orgunit",
            name="geom",
            field=django.contrib.gis.db.models.fields.MultiPolygonField(
                blank=True, geography=True, null=True, srid=4326
            ),
        ),
        migrations.AlterField(
            model_name="orgunit",
            name="location",
            field=django.contrib.gis.db.models.fields.PointField(
                blank=True, dim=3, geography=True, null=True, srid=4326
            ),
        ),
        migrations.AlterField(
            model_name="orgunit",
            name="simplified_geom",
            field=django.contrib.gis.db.models.fields.MultiPolygonField(
                blank=True, geography=True, null=True, srid=4326
            ),
        ),
        migrations.RemoveField(
            model_name="orgunit",
            name="latitude",
        ),
        migrations.RemoveField(
            model_name="orgunit",
            name="longitude",
        ),
        migrations.RemoveField(
            model_name="orgunit",
            name="geom_source",
        ),
        migrations.AlterField(
            model_name="orgunit",
            name="sub_source",
            field=models.TextField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name="orgunit",
            name="validation_status",
            field=models.CharField(
                choices=[("NEW", "new"), ("VALID", "valid"), ("REJECTED", "rejected")], default="NEW", max_length=25
            ),
        ),
        # migrations.RunPython(
        #     code=iaso.migrations.0062_transfer_validation_status.transfer_validation_status,
        # ),
        migrations.AddField(
            model_name="form",
            name="uuid",
            field=models.UUIDField(blank=True, null=True),
        ),
        # migrations.RunPython(
        #     code=iaso.migrations.0063_form_uuid.create_uuid,
        # ),
        migrations.AlterField(
            model_name="form",
            name="uuid",
            field=models.UUIDField(unique=True),
        ),
        migrations.AddField(
            model_name="instancefile",
            name="deleted",
            field=models.BooleanField(default=False),
        ),
        migrations.AlterField(
            model_name="form",
            name="uuid",
            field=models.UUIDField(default=uuid.uuid4, unique=True),
        ),
        migrations.AlterField(
            model_name="featureflag",
            name="code",
            field=models.CharField(max_length=30, unique=True),
        ),
        migrations.AlterField(
            model_name="project",
            name="name",
            field=models.TextField(),
        ),
        migrations.AlterField(
            model_name="datasource",
            name="read_only",
            field=models.BooleanField(default=False),
        ),
        # migrations.RunPython(
        #     code=iaso.migrations.0065_auto_20201201_1228.set_all_writeable,
        # ),
        migrations.AlterField(
            model_name="deviceownership",
            name="end",
            field=models.DateTimeField(null=True),
        ),
        migrations.AlterField(
            model_name="device",
            name="imei",
            field=models.CharField(blank=True, max_length=250, null=True),
        ),
        migrations.AddField(
            model_name="deviceposition",
            name="transport",
            field=models.CharField(
                choices=[("car", "Car"), ("foot", "Foot"), ("truck", "Truc")], default="car", max_length=32
            ),
            preserve_default=False,
        ),
        migrations.AlterField(
            model_name="exportrequest",
            name="status",
            field=models.TextField(
                choices=[
                    ("QUEUED", "Queued"),
                    ("RUNNING", "Running"),
                    ("EXPORTED", "Exported"),
                    ("ERRORED", "Errored"),
                    ("SKIPPED", "Skipped"),
                    ("SUCCESS", "Success"),
                ],
                default="QUEUED",
            ),
        ),
        migrations.AlterField(
            model_name="exportstatus",
            name="status",
            field=models.TextField(
                choices=[
                    ("QUEUED", "Queued"),
                    ("RUNNING", "Running"),
                    ("EXPORTED", "Exported"),
                    ("ERRORED", "Errored"),
                    ("SKIPPED", "Skipped"),
                    ("SUCCESS", "Success"),
                ],
                default="QUEUED",
            ),
        ),
        migrations.AlterField(
            model_name="exportrequest",
            name="status",
            field=models.TextField(
                choices=[
                    ("QUEUED", "Queued"),
                    ("RUNNING", "Running"),
                    ("EXPORTED", "Exported"),
                    ("ERRORED", "Errored"),
                    ("SKIPPED", "Skipped"),
                    ("KILLED", "Killed"),
                    ("SUCCESS", "Success"),
                ],
                default="QUEUED",
            ),
        ),
        migrations.AlterField(
            model_name="exportstatus",
            name="status",
            field=models.TextField(
                choices=[
                    ("QUEUED", "Queued"),
                    ("RUNNING", "Running"),
                    ("EXPORTED", "Exported"),
                    ("ERRORED", "Errored"),
                    ("SKIPPED", "Skipped"),
                    ("KILLED", "Killed"),
                    ("SUCCESS", "Success"),
                ],
                default="QUEUED",
            ),
        ),
        migrations.CreateModel(
            name="Task",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("ended_at", models.DateTimeField(blank=True, null=True)),
                ("progress_value", models.IntegerField(default=0)),
                ("end_value", models.IntegerField(default=0)),
                ("result", django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True)),
                ("account", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="iaso.account")),
                (
                    "launcher",
                    models.ForeignKey(
                        blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL
                    ),
                ),
                ("name", models.TextField(default="task")),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("QUEUED", "Queued"),
                            ("RUNNING", "Running"),
                            ("EXPORTED", "Exported"),
                            ("ERRORED", "Errored"),
                            ("SKIPPED", "Skipped"),
                            ("KILLED", "Killed"),
                            ("SUCCESS", "Success"),
                        ],
                        default="QUEUED",
                        max_length=40,
                    ),
                ),
                ("params", django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True)),
                ("started_at", models.DateTimeField(blank=True, null=True)),
                ("queue_answer", django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True)),
                ("progress_message", models.TextField(blank=True, null=True)),
                ("should_be_killed", models.BooleanField(default=False)),
            ],
        ),
        migrations.AddField(
            model_name="form",
            name="label_keys",
            field=django.contrib.postgres.fields.ArrayField(
                base_field=django.contrib.postgres.fields.citext.CITextField(blank=True, max_length=255),
                blank=True,
                null=True,
                size=100,
            ),
        ),
        migrations.AddField(
            model_name="project",
            name="external_token",
            field=models.UUIDField(default=uuid.uuid4, null=True),
        ),
        migrations.AddField(
            model_name="profile",
            name="external_user_id",
            field=models.CharField(blank=True, max_length=512, null=True),
        ),
        migrations.AddField(
            model_name="instance",
            name="to_export",
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name="exportrequest",
            name="continue_on_error",
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name="datasource",
            name="default_version",
            field=models.ForeignKey(
                blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to="iaso.sourceversion"
            ),
        ),
        migrations.AddField(
            model_name="form",
            name="deleted_at",
            field=models.DateTimeField(blank=True, default=None, null=True),
        ),
        migrations.AddField(
            model_name="formversion",
            name="end_period",
            field=models.TextField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name="formversion",
            name="start_period",
            field=models.TextField(blank=True, null=True),
        ),
        migrations.DeleteModel(
            name="BulkOperation",
        ),
        migrations.RunSQL(
            sql="\nCREATE OR REPLACE FUNCTION iaso_group_org_units_same_source_version() RETURNS trigger AS\n$F$\nBEGIN\n    IF ((select count(*) from iaso_group_org_units go\n            join iaso_group on (iaso_group.id = go.group_id)\n            join iaso_orgunit on (iaso_orgunit.id = go.orgunit_id)\n            where go.group_id = new.group_id\n            and go.orgunit_id = new.orgunit_id\n            and iaso_orgunit.version_id != iaso_group.source_version_id) > 0)\n    THEN\n        RAISE EXCEPTION 'Constraint violation iaso_group_org_units_same_source_version_constraint';\n    END IF;\n    RETURN NEW;\nEND;\n$F$ LANGUAGE plpgsql;",
            reverse_sql="DROP FUNCTION iaso_group_org_units_same_source_version;",
        ),
        migrations.RunSQL(
            sql="\n        CREATE CONSTRAINT TRIGGER iaso_group_org_units_same_source_version_constraint\n        AFTER INSERT OR UPDATE\n        ON iaso_group_org_units\n        DEFERRABLE INITIALLY DEFERRED\n        FOR EACH ROW\n        EXECUTE PROCEDURE iaso_group_org_units_same_source_version();\n        ",
            reverse_sql="\n        DROP TRIGGER iaso_group_org_units_same_source_version_constraint\n        ON iaso_group_org_units;",
        ),
        migrations.RunSQL(
            sql="\n    CREATE OR REPLACE FUNCTION iaso_group_org_units_same_source_version_group() RETURNS trigger AS\n    $F$\n    BEGIN\n        IF ((select count(*) from iaso_group_org_units go\n                join iaso_group on (iaso_group.id = go.group_id)\n                join iaso_orgunit on (iaso_orgunit.id = go.orgunit_id)\n                where go.group_id = new.id\n\n                and iaso_orgunit.version_id != iaso_group.source_version_id) > 0)\n        THEN\n            RAISE EXCEPTION 'Constraint violation iaso_group_org_units_same_source_version_constraint';\n        END IF;\n        RETURN NEW;\n    END;\n    $F$ LANGUAGE plpgsql;",
            reverse_sql="DROP FUNCTION iaso_group_org_units_same_source_version;",
        ),
        migrations.RunSQL(
            sql="\n            CREATE CONSTRAINT TRIGGER iaso_group_same_source_version_as_org_unit_constraint\n            AFTER INSERT OR UPDATE\n            ON iaso_group\n            DEFERRABLE INITIALLY DEFERRED\n            FOR EACH ROW\n            EXECUTE PROCEDURE iaso_group_org_units_same_source_version_group();",
            reverse_sql="\n            DROP TRIGGER iaso_group_same_source_version_as_org_unit_constraint\n            ON iaso_group;",
        ),
        migrations.RunSQL(
            sql="\n    CREATE OR REPLACE FUNCTION iaso_group_org_units_same_source_version_orgunit() RETURNS trigger AS\n    $F$\n    BEGIN\n        IF ((select count(*) from iaso_group_org_units go\n                join iaso_group on (iaso_group.id = go.group_id)\n                join iaso_orgunit on (iaso_orgunit.id = go.orgunit_id)\n                where go.orgunit_id = new.id\n                and iaso_orgunit.version_id != iaso_group.source_version_id) > 0)\n        THEN\n            RAISE EXCEPTION 'Constraint violation iaso_group_org_units_same_source_version_constraint';\n        END IF;\n        RETURN NEW;\n    END;\n    $F$ LANGUAGE plpgsql;",
            reverse_sql="DROP FUNCTION iaso_group_org_units_same_source_version_orgunit;",
        ),
        migrations.RunSQL(
            sql="\n            CREATE CONSTRAINT TRIGGER iaso_org_units_same_source_version_constraint\n            AFTER INSERT OR UPDATE\n            ON iaso_orgunit\n            DEFERRABLE INITIALLY DEFERRED\n            FOR EACH ROW\n            EXECUTE PROCEDURE iaso_group_org_units_same_source_version_orgunit();\n            ",
            reverse_sql="\n            DROP TRIGGER iaso_org_units_same_source_version_constraint ON iaso_orgunit;",
        ),
        migrations.AddField(
            model_name="group",
            name="domain",
            field=models.CharField(blank=True, choices=[("POLIO", "Polio")], max_length=10, null=True),
        ),
        migrations.CreateModel(
            name="Page",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("name", models.TextField()),
                ("content", models.TextField(blank=True, null=True)),
                ("slug", models.SlugField(max_length=1000, unique=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("users", models.ManyToManyField(blank=True, related_name="pages", to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name="profile",
            name="language",
            field=models.CharField(blank=True, max_length=512, null=True),
        ),
        migrations.AlterField(
            model_name="algorithmrun",
            name="result",
            field=models.JSONField(blank=True, null=True),
        ),
        migrations.AlterField(
            model_name="exportlog",
            name="received",
            field=models.JSONField(blank=True, null=True),
        ),
        migrations.AlterField(
            model_name="exportlog",
            name="sent",
            field=models.JSONField(blank=True, null=True),
        ),
        migrations.AlterField(
            model_name="exportrequest",
            name="params",
            field=models.JSONField(blank=True, null=True),
        ),
        migrations.AlterField(
            model_name="exportrequest",
            name="result",
            field=models.JSONField(blank=True, null=True),
        ),
        migrations.AlterField(
            model_name="form",
            name="fields",
            field=models.JSONField(blank=True, null=True),
        ),
        migrations.AlterField(
            model_name="formversion",
            name="form_descriptor",
            field=models.JSONField(blank=True, null=True),
        ),
        migrations.AlterField(
            model_name="instance",
            name="json",
            field=models.JSONField(blank=True, null=True),
        ),
        migrations.AlterField(
            model_name="mappingversion",
            name="json",
            field=models.JSONField(),
        ),
        migrations.AlterField(
            model_name="task",
            name="params",
            field=models.JSONField(blank=True, null=True),
        ),
        migrations.AlterField(
            model_name="task",
            name="queue_answer",
            field=models.JSONField(blank=True, null=True),
        ),
        migrations.AlterField(
            model_name="task",
            name="result",
            field=models.JSONField(blank=True, null=True),
        ),
        migrations.CreateModel(
            name="ImportGPKG",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("file", models.FileField(upload_to="gpkg_import/")),
                ("version_number", models.IntegerField()),
                ("data_source", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="iaso.datasource")),
                ("project", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="iaso.project")),
            ],
        ),
        migrations.CreateModel(
            name="CommentIaso",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("object_pk", models.CharField(db_index=True, max_length=64, verbose_name="object ID")),
                ("user_name", models.CharField(blank=True, max_length=50, verbose_name="user's name")),
                ("user_email", models.EmailField(blank=True, max_length=254, verbose_name="user's email address")),
                ("user_url", models.URLField(blank=True, verbose_name="user's URL")),
                ("comment", models.TextField(max_length=3000, verbose_name="comment")),
                ("submit_date", models.DateTimeField(db_index=True, default=None, verbose_name="date/time submitted")),
                (
                    "ip_address",
                    models.GenericIPAddressField(blank=True, null=True, unpack_ipv4=True, verbose_name="IP address"),
                ),
                (
                    "is_public",
                    models.BooleanField(
                        default=True,
                        help_text="Uncheck this box to make the comment effectively disappear from the site.",
                        verbose_name="is public",
                    ),
                ),
                (
                    "is_removed",
                    models.BooleanField(
                        db_index=True,
                        default=False,
                        help_text='Check this box if the comment is inappropriate. A "This comment has been removed" message will be displayed instead.',
                        verbose_name="is removed",
                    ),
                ),
                (
                    "content_type",
                    models.ForeignKey(
                        limit_choices_to={"model": "orgunit"},
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="content_type_set_for_commentiaso2",
                        to="contenttypes.contenttype",
                        verbose_name="content type",
                    ),
                ),
                (
                    "parent",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="children",
                        to="iaso.commentiaso",
                    ),
                ),
                ("site", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="sites.site")),
                (
                    "user",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="commentiaso_comments",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="user",
                    ),
                ),
            ],
            options={
                "verbose_name": "comment",
                "verbose_name_plural": "comments",
                "ordering": ("submit_date",),
                "permissions": [("can_moderate", "Can moderate comments")],
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="AccountFeatureFlag",
            fields=[
                ("name", models.CharField(max_length=255)),
                ("code", models.CharField(max_length=255, primary_key=True, serialize=False)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.AddField(
            model_name="account",
            name="feature_flags",
            field=models.ManyToManyField(to="iaso.AccountFeatureFlag"),
        ),
        migrations.RunPython(
            code=create_shape_account_flag,
            reverse_code=reverse_create_shape_account_flag,
        ),
        migrations.RunPython(
            code=create_catchment_account_flag,
            reverse_code=reverse_catchment_shape_account_flag,
        ),
        migrations.AddField(
            model_name="orgunittype",
            name="category",
            field=models.CharField(
                blank=True, choices=[("COUNTRY", "Country"), ("DISTRICT", "District")], max_length=8, null=True
            ),
        ),
        migrations.AlterModelOptions(
            name="task",
            options={"ordering": ["-created_at"]},
        ),
    ]
